- name: Re-Login to keycloak
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/realms/master/protocol/openid-connect/token"
    return_content: yes
    body_format: form-urlencoded
    body:
        grant_type: "password"
        client_id: "admin-cli"
        username: "{{ ADMIN_USERNAME }}"
        password: "{{ ADMIN_PASSWORD }}"
    status_code: 200
  register: keycloak_login

- name: Create Platform Admin User
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/users"
    return_content: yes
    body_format: json
<<<<<<< HEAD
    body: "{{ lookup('template', 'keycloak/users/platform_admin.json.j2') }}"
=======
    body: "{{ lookup('template', 'idm/users/platform_admin.json.j2') }}"
>>>>>>> 70f8f1d (deployment and initial configs)
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 201,409
  register: keycloak_platform_admin_response

<<<<<<< HEAD
=======
- name: "User already existing."
  debug:
    msg: "Failed. User {{ PLATFORM_ADMIN_EMAIL }} already existing?"
  when: keycloak_platform_admin_response.status == 409

- name: Create Application Admin User
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/users"
    return_content: yes
    body_format: json
    body: "{{ lookup('template', 'idm/users/application_admin.json.j2') }}"
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 201,409
  register: keycloak_application_admin_response

- name: "User already existing."
  debug:
    msg: "Failed. User {{ APPLICATION_ADMIN_EMAIL }} already existing?"
  when: keycloak_application_admin_response.status == 409

>>>>>>> 70f8f1d (deployment and initial configs)
- name: Get users
  uri:
    method: GET
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/users"
    return_content: yes
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 200
  register: users

<<<<<<< HEAD
- name: Print the gateway for each host when defined
  ansible.builtin.debug:
    msg: "{{ users }}"

=======
>>>>>>> 70f8f1d (deployment and initial configs)
- name: "Set platform user id."
  set_fact:
    platform_user_id: "{{ users.json | json_query(query) }}"
  vars:
<<<<<<< HEAD
    query: "[?username== '{{ ADMIN_USERNAME }}'].id | [0]"
=======
    query: "[?username== '{{ PLATFORM_ADMIN_EMAIL }}'].id | [0]"

- name: "Set application user id."
  set_fact:
    application_user_id: "{{ users.json | json_query(query) }}"
  vars:
    query: "[?username== '{{ APPLICATION_ADMIN_EMAIL }}'].id | [0]"
>>>>>>> 70f8f1d (deployment and initial configs)

- name: Get roles api_access
  uri:
    method: GET
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id_api_access }}/roles"
    return_content: yes
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 200
  register: api_access_roles

- name: Get roles grafana
  uri:
    method: GET
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id_grafana }}/roles"
    return_content: yes
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 200
  register: grafana_roles

- name: Get roles gravitee
  uri:
    method: GET
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id_gravitee }}/roles"
    return_content: yes
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 200
  register: gravitee_roles

<<<<<<< HEAD
- name: Get roles Admin Tools
  uri:
    method: GET
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id_admin_tools }}/roles"
=======
- name: Get roles pgadmin
  uri:
    method: GET
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id_pgadmin }}/roles"
>>>>>>> 70f8f1d (deployment and initial configs)
    return_content: yes
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 200
<<<<<<< HEAD
  register: admin_tools_roles

- name: Get roles Masterportal
  uri:
    method: GET
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id_masterportal }}/roles"
=======
  register: pgadmin_roles

- name: Get roles citywalk
  uri:
    method: GET
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id_citywalk }}/roles"
>>>>>>> 70f8f1d (deployment and initial configs)
    return_content: yes
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 200
<<<<<<< HEAD
  register: masterportal_roles

- name: Get roles CKAN
=======
  register: citywalk_roles

- name: Get roles ckan
>>>>>>> 70f8f1d (deployment and initial configs)
  uri:
    method: GET
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id_ckan }}/roles"
    return_content: yes
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 200
  register: ckan_roles

<<<<<<< HEAD
- name: Get roles minio
  uri:
    method: GET
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id_minio }}/roles"
=======
- name: Get roles geodata
  uri:
    method: GET
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id_geodata }}/roles"
    return_content: yes
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 200
  register: geodata_roles

- name: Get roles nodered
  uri:
    method: GET
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/clients/{{ client_id_nodered }}/roles"
>>>>>>> 70f8f1d (deployment and initial configs)
    return_content: yes
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 200
<<<<<<< HEAD
  register: minio_roles
=======
  register: nodered_roles
>>>>>>> 70f8f1d (deployment and initial configs)

- name: "Set role id api_access."
  set_fact:
    api_access_role_id: "{{ api_access_roles.json | json_query(query) }}"
  vars:
    query: "[?name== 'dataAdmin'].id | [0]"

- name: "Set role id grafana."
  set_fact:
    grafana_role_id: "{{ grafana_roles.json | json_query(query) }}"
  vars:
    query: "[?name== 'grafanaAdmin'].id | [0]"

- name: "Set role id gravitee."
  set_fact:
    gravitee_role_id: "{{ gravitee_roles.json | json_query(query) }}"
  vars:
    query: "[?name== 'graviteeAdmin'].id | [0]"

<<<<<<< HEAD
- name: "Set role id admin tools."
  set_fact:
    admin_tools_role_id: "{{ admin_tools_roles.json | json_query(query) }}"
  vars:
    query: "[?name== 'adminToolsAdmin'].id | [0]"

- name: "Set role id masterportal."
  set_fact:
    masterportal_role_id: "{{ masterportal_roles.json | json_query(query) }}"
  vars:
    query: "[?name== 'masterportalAdmin'].id | [0]"

- name: "Set role id CKAN."
=======
- name: "Set role id pgadmin."
  set_fact:
    pgadmin_role_id: "{{ pgadmin_roles.json | json_query(query) }}"
  vars:
    query: "[?name== 'pgadminAdmin'].id | [0]"

- name: "Set role id citywalk."
  set_fact:
    citywalk_role_id: "{{ citywalk_roles.json | json_query(query) }}"
  vars:
    query: "[?name== 'citywalkAdmin'].id | [0]"

- name: "Set role id ckan."
>>>>>>> 70f8f1d (deployment and initial configs)
  set_fact:
    ckan_role_id: "{{ ckan_roles.json | json_query(query) }}"
  vars:
    query: "[?name== 'ckanAdmin'].id | [0]"

<<<<<<< HEAD
- name: "Set role id minio."
  set_fact:
    minio_role_id: "{{ minio_roles.json | json_query(query) }}"
  vars:
    query: "[?name== 'minioAdmin'].id | [0]"
=======
- name: "Set role id geodata."
  set_fact:
    geodata_role_id: "{{ geodata_roles.json | json_query(query) }}"
  vars:
    query: "[?name== 'geodataAdmin'].id | [0]"

- name: "Set role id nodered."
  set_fact:
    nodered_role_id: "{{ nodered_roles.json | json_query(query) }}"
  vars:
    query: "[?name== 'noderedAdmin'].id | [0]"

- name: Get groups
  uri:
    method: GET
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/groups"
    return_content: yes
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 200
  register: realm_groups

- name: "Set group id iot_tenant."
  set_fact:
    group_iot_tenant_id: "{{ realm_groups.json | json_query(query) }}"
  vars:
    query: "[?name== '{{ IDM_GROUP_IOT_TENANT_NAME }}'].id | [0]"
>>>>>>> 70f8f1d (deployment and initial configs)

### Following configureation will be skipped if target user already exists

- name: Set Password for User (from k8s secret)
  uri:
    method: PUT
    url: "{{ keycloak_platform_admin_response.location }}/reset-password"
    return_content: yes
    body_format: json
    body: |
        { "type":"password",
          "value":"{{ ADMIN_PASSWORD }}",
          "temporary":false}
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 204
  when: keycloak_platform_admin_response.status != 409

<<<<<<< HEAD
- name: Print the gateway for each host when defined
  ansible.builtin.debug:
    msg: "{{ platform_user_id }}"
=======
- name: Set Password for User (initial from inventory)
  uri:
    method: PUT
    url: "{{ keycloak_application_admin_response.location }}/reset-password"
    return_content: yes
    body_format: json
    body: |
        { "type":"password",
          "value":"{{ APPLICATION_ADMIN_INITIAL_PASSWORD }}",
          "temporary":false}
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 204
  when: keycloak_application_admin_response.status != 409
>>>>>>> 70f8f1d (deployment and initial configs)

- name: Assign Roles to Platform Admin (api-access)
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/users/{{ platform_user_id }}/role-mappings/clients/{{ client_id_api_access }}"
    return_content: yes
    body_format: json
    body: |
      [{
        "id": "{{ api_access_role_id }}",
        "name": "dataAdmin",
        "composite": false,
        "clientRole": true,
        "containerId": "{{ client_id_api_access }}"
      }]
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 204
  when: keycloak_platform_admin_response.status != 409

- name: Assign Roles to Platform Admin (grafana)
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/users/{{ platform_user_id }}/role-mappings/clients/{{ client_id_grafana }}"
    return_content: yes
    body_format: json
    body: |
      [{
        "id": "{{ grafana_role_id }}",
        "name": "grafanaAdmin",
        "composite": false,
        "clientRole": true,
        "containerId": "{{ client_id_grafana }}"
      }]
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 204
  when: keycloak_platform_admin_response.status != 409

- name: Assign Roles to Platform Admin (gravitee)
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/users/{{ platform_user_id }}/role-mappings/clients/{{ client_id_gravitee }}"
    return_content: yes
    body_format: json
    body: |
      [{
        "id": "{{ gravitee_role_id }}",
        "name": "graviteeAdmin",
        "composite": false,
        "clientRole": true,
        "containerId": "{{ client_id_gravitee }}"
      }]
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 204
  when: keycloak_platform_admin_response.status != 409

<<<<<<< HEAD
- name: Assign Roles to Platform Admin (Admin Tools)
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/users/{{ platform_user_id }}/role-mappings/clients/{{ client_id_admin_tools }}"
=======
- name: Assign Roles to Platform Admin (pgadmin)
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/users/{{ platform_user_id }}/role-mappings/clients/{{ client_id_pgadmin }}"
>>>>>>> 70f8f1d (deployment and initial configs)
    return_content: yes
    body_format: json
    body: |
      [{
<<<<<<< HEAD
        "id": "{{ admin_tools_role_id }}",
        "name": "adminToolsAdmin",
        "composite": false,
        "clientRole": true,
        "containerId": "{{ client_id_admin_tools }}"
=======
        "id": "{{ pgadmin_role_id }}",
        "name": "pgadminAdmin",
        "composite": false,
        "clientRole": true,
        "containerId": "{{ client_id_pgadmin }}"
>>>>>>> 70f8f1d (deployment and initial configs)
      }]
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 204
  when: keycloak_platform_admin_response.status != 409

<<<<<<< HEAD
- name: Assign Roles to Platform Admin (Masterportal)
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/users/{{ platform_user_id }}/role-mappings/clients/{{ client_id_masterportal }}"
=======
- name: Assign Roles to Platform Admin (citywalk)
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/users/{{ platform_user_id }}/role-mappings/clients/{{ client_id_citywalk }}"
>>>>>>> 70f8f1d (deployment and initial configs)
    return_content: yes
    body_format: json
    body: |
      [{
<<<<<<< HEAD
        "id": "{{ masterportal_role_id }}",
        "name": "masterportalAdmin",
        "composite": false,
        "clientRole": true,
        "containerId": "{{ client_id_masterportal }}"
=======
        "id": "{{ citywalk_role_id }}",
        "name": "citywalkAdmin",
        "composite": false,
        "clientRole": true,
        "containerId": "{{ client_id_citywalk }}"
>>>>>>> 70f8f1d (deployment and initial configs)
      }]
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 204
  when: keycloak_platform_admin_response.status != 409

<<<<<<< HEAD
- name: Assign Roles to Platform Admin (CKAN)
=======
- name: Assign Roles to Platform Admin (ckan)
>>>>>>> 70f8f1d (deployment and initial configs)
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/users/{{ platform_user_id }}/role-mappings/clients/{{ client_id_ckan }}"
    return_content: yes
    body_format: json
    body: |
      [{
        "id": "{{ ckan_role_id }}",
        "name": "ckanAdmin",
        "composite": false,
        "clientRole": true,
        "containerId": "{{ client_id_ckan }}"
      }]
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 204
<<<<<<< HEAD
  when: keycloak_platform_admin_response.status != 409  

- name: Assign Roles to Platform Admin (MINIO)
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/users/{{ platform_user_id }}/role-mappings/clients/{{ client_id_minio }}"
=======
  when: keycloak_platform_admin_response.status != 409

- name: Assign Roles to Platform Admin (geodata)
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/users/{{ platform_user_id }}/role-mappings/clients/{{ client_id_geodata }}"
>>>>>>> 70f8f1d (deployment and initial configs)
    return_content: yes
    body_format: json
    body: |
      [{
<<<<<<< HEAD
        "id": "{{ minio_role_id }}",
        "name": "minioAdmin",
        "composite": false,
        "clientRole": true,
        "containerId": "{{ client_id_minio }}"
=======
        "id": "{{ geodata_role_id }}",
        "name": "geodataAdmin",
        "composite": false,
        "clientRole": true,
        "containerId": "{{ client_id_geodata }}"
>>>>>>> 70f8f1d (deployment and initial configs)
      }]
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 204
<<<<<<< HEAD
  when: keycloak_platform_admin_response.status != 409    

### Manage Group Assignments

- name: Get groups
  uri:
    method: GET
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/groups"
    return_content: yes
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 200
  register: realm_groups

- name: "Set group id default_tenant."
  set_fact:
    group_default_tenant_id: "{{ realm_groups.json | json_query(query) }}"
  vars:
    query: "[?name== '{{ IDM_GROUP_DEFAULT_TENANT_NAME }}'].id | [0]"

- name: Join Platform-Admin to Default-Tenant Group
  uri:
    method: PUT
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/users/{{ platform_user_id }}/groups/{{ group_default_tenant_id }}"
=======
  when: keycloak_platform_admin_response.status != 409

- name: Assign Roles to Platform Admin (nodered)
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/users/{{ platform_user_id }}/role-mappings/clients/{{ client_id_nodered }}"
    return_content: yes
    body_format: json
    body: |
      [{
        "id": "{{ nodered_role_id }}",
        "name": "noderedAdmin",
        "composite": false,
        "clientRole": true,
        "containerId": "{{ client_id_nodered }}"
      }]
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 204
  when: keycloak_platform_admin_response.status != 409

- name: Assign Roles to Application Admin (api-access)
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/users/{{ application_user_id }}/role-mappings/clients/{{ client_id_api_access }}"
    return_content: yes
    body_format: json
    body: |
      [{
        "id": "{{ api_access_role_id }}",
        "name": "dataAdmin",
        "composite": false,
        "clientRole": true,
        "containerId": "{{ client_id_api_access }}"
      }]
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 204
  when: keycloak_application_admin_response.status != 409

- name: Assign Roles to Application Admin (grafana)
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/users/{{ application_user_id }}/role-mappings/clients/{{ client_id_grafana }}"
    return_content: yes
    body_format: json
    body: |
      [{
        "id": "{{ grafana_role_id }}",
        "name": "grafanaAdmin",
        "composite": false,
        "clientRole": true,
        "containerId": "{{ client_id_grafana }}"
      }]
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 204
  when: keycloak_application_admin_response.status != 409

- name: Assign Roles to Application Admin (gravitee)
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/users/{{ application_user_id }}/role-mappings/clients/{{ client_id_gravitee }}"
    return_content: yes
    body_format: json
    body: |
      [{
        "id": "{{ gravitee_role_id }}",
        "name": "graviteeAdmin",
        "composite": false,
        "clientRole": true,
        "containerId": "{{ client_id_gravitee }}"
      }]
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 204
  when: keycloak_application_admin_response.status != 409

- name: Assign Roles to Application Admin (pgadmin)
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/users/{{ application_user_id }}/role-mappings/clients/{{ client_id_pgadmin }}"
    return_content: yes
    body_format: json
    body: |
      [{
        "id": "{{ pgadmin_role_id }}",
        "name": "pgadminAdmin",
        "composite": false,
        "clientRole": true,
        "containerId": "{{ client_id_pgadmin }}"
      }]
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 204
  when: keycloak_application_admin_response.status != 409

- name: Assign Roles to Application Admin (citywalk)
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/users/{{ application_user_id }}/role-mappings/clients/{{ client_id_citywalk }}"
    return_content: yes
    body_format: json
    body: |
      [{
        "id": "{{ citywalk_role_id }}",
        "name": "citywalkAdmin",
        "composite": false,
        "clientRole": true,
        "containerId": "{{ client_id_citywalk }}"
      }]
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 204
  when: keycloak_application_admin_response.status != 409

- name: Assign Roles to Application Admin (ckan)
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/users/{{ application_user_id }}/role-mappings/clients/{{ client_id_ckan }}"
    return_content: yes
    body_format: json
    body: |
      [{
        "id": "{{ ckan_role_id }}",
        "name": "ckanAdmin",
        "composite": false,
        "clientRole": true,
        "containerId": "{{ client_id_ckan }}"
      }]
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 204
  when: keycloak_application_admin_response.status != 409

- name: Assign Roles to Application Admin (geodata)
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/users/{{ application_user_id }}/role-mappings/clients/{{ client_id_geodata }}"
    return_content: yes
    body_format: json
    body: |
      [{
        "id": "{{ geodata_role_id }}",
        "name": "geodataAdmin",
        "composite": false,
        "clientRole": true,
        "containerId": "{{ client_id_geodata }}"
      }]
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 204
  when: keycloak_application_admin_response.status != 409

- name: Assign Roles to Application Admin (nodered)
  uri:
    method: POST
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/users/{{ application_user_id }}/role-mappings/clients/{{ client_id_nodered }}"
    return_content: yes
    body_format: json
    body: |
      [{
        "id": "{{ nodered_role_id }}",
        "name": "noderedAdmin",
        "composite": false,
        "clientRole": true,
        "containerId": "{{ client_id_nodered }}"
      }]
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 204
  when: keycloak_application_admin_response.status != 409

- name: Join Platform-Admin to IoT-Tenant Group
  uri:
    method: PUT
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/users/{{ platform_user_id }}/groups/{{ group_iot_tenant_id }}"
>>>>>>> 70f8f1d (deployment and initial configs)
    return_content: yes
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 204
<<<<<<< HEAD
  when: keycloak_platform_admin_response.status != 409   

=======
  when: keycloak_platform_admin_response.status != 409

- name: Join Application-Admin to IoT-Tenant Group
  uri:
    method: PUT
    url: "https://idm.{{ DOMAIN }}/auth/admin/realms/{{ IDM_REALM }}/users/{{ application_user_id }}/groups/{{ group_iot_tenant_id }}"
    return_content: yes
    headers:
      Accept: application/json
      Authorization: Bearer {{ keycloak_login.json.access_token }}
    status_code: 204
  when: keycloak_application_admin_response.status != 409
>>>>>>> 70f8f1d (deployment and initial configs)
