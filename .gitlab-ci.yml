#
# GITLAB CI Variables:
# --------------------
#
# File: DEPLOY_KEY_PRIVATE_PROD: private ssh key
# File: DEPLOY_KEY_PUBLIC_PROD: public ssh key
# File: INVENTORY_PROD: ansible inventory file
#
# Variable: TARGET_HOST_PROD: IP address of target host
# Variable: TARGET_HOSTNAME_PROD: name of target host from inventory (e.g. demo)
#

stages:
    #- verify
    - staging
    - prod
    - test

image: willhallonline/ansible:2.10-ubuntu-20.04

variables: &global-variables
    ANSIBLE_HOST_KEY_CHECKING: 'false'
    ANSIBLE_FORCE_COLOR: 'true'
    ANSIBLE_CONFIG: "ansible.cfg"
    ANSIBLE_SCP_IF_SSH: 'y'
    DEBIAN_FRONTEND: 'noninteractive'


####################################
######     VERIFY / LINT    ########
####################################


### verify syntaxs etc...
# verify_commit:
#   stage: verify
#   environment:
#     name: "Verify ansible playbooks"
#   script:
#     - 'which ansible-lint || ( pip install ansible-lint )'
#     - ansible-lint -x experimental -v 02_setup_k8s/setup_k8s_playbook_01.yml
#     - ansible-lint -x experimental -v 02_setup_k8s/setup_k8s_playbook_02.yml
#     - ansible-lint -x experimental -v 02_setup_k8s/setup_k8s_playbook_03.yml
#     - ansible-lint -x experimental -v 03_setup_k8s_platform/full_install.yml


####################################
######     STAGING       ###########
####################################


.ssh_config_staging: &ssh_config_staging
    # Get SSH keys
    - mkdir -p /root/.ssh
    - mv "$STAGING_KEY_PRIVATE" /root/.ssh/id_rsa_sc_admin
    - mv "$STAGING_KEY_PUBLIC" /root/.ssh/id_rsa_sc_admin.pub
    # Add SSH Key
    - chmod 600 /root/.ssh/id_rsa_sc_admin
    - chmod 600 /root/.ssh/id_rsa_sc_admin.pub
    - eval "$(ssh-agent -s)"
    - ssh-add /root/.ssh/id_rsa_sc_admin
    - ssh-keyscan -H $STAGING_TARGET_HOST >> /root/.ssh/known_hosts
    # Add SSH Config for acn user
    - touch /root/.ssh/config
    - echo "Host $STAGING_TARGET_HOST" >> /root/.ssh/config
    - echo "    HostName $STAGING_TARGET_HOST" >> /root/.ssh/config
    - echo "    User acn" >> /root/.ssh/config
    - echo "    PreferredAuthentications publickey,password" >> /root/.ssh/config
    - echo "    IdentityFile /root/.ssh/id_rsa_sc_admin" >> /root/.ssh/config
    - chmod 600 /root/.ssh/config

# deploy for staging
deploy_staging_k8s+platform:
  script:
    - apt-get update -y && apt-get install curl apt-transport-https -y
    # Add Helm package repo
    - curl https://baltocdn.com/helm/signing.asc | apt-key add -
    - echo "deb https://baltocdn.com/helm/stable/debian/ all main" | tee /etc/apt/sources.list.d/helm-stable-debian.list
    # Add kubectl package repo
    - curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
    - echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | tee /etc/apt/sources.list.d/kubernetes.list
    # Install required system packages
    - apt-get update -y && apt install openssh-client curl vim git less iputils-ping sshpass libpq-dev gcc python3-dev musl-dev helm kubectl -y
    # Install required python packages
    - python3 -m pip install 'openshift==0.11.2' jmespath docker psycopg2-binary pymongo

    # Start installing platform
    - mv "$STAGING_INVENTORY_FULL" inventory
    - *ssh_config_staging
    - ansible-playbook -i inventory -l $TARGET_HOSTNAME -u root 02_setup_k8s/setup_k8s_playbook_01.yml
    - ansible-playbook -i inventory -l $TARGET_HOSTNAME -u acn 02_setup_k8s/setup_k8s_playbook_02.yml
    - ansible-playbook -i inventory -l localhost -u acn 02_setup_k8s/setup_k8s_playbook_03.yml
    - ansible-playbook -i inventory -l localhost 03_setup_k8s_platform/full_install.yml
  when: manual
  stage: staging
  environment:
    name: "Deploy Staging Full"
  artifacts:
    paths:
      - .facts/
    expire_in: never
    when: on_success

deploy_staging_platform:
  script:
    - apt-get update -y && apt-get install curl apt-transport-https -y
    # Add Helm package repo
    - curl https://baltocdn.com/helm/signing.asc | apt-key add -
    - echo "deb https://baltocdn.com/helm/stable/debian/ all main" | tee /etc/apt/sources.list.d/helm-stable-debian.list
    # Add kubectl package repo
    - curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
    - echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | tee /etc/apt/sources.list.d/kubernetes.list
    # Install required system packages
    - apt-get update -y && apt install openssh-client curl vim git less iputils-ping sshpass libpq-dev gcc python3-dev musl-dev helm kubectl -y
    # Install required python packages
    - python3 -m pip install 'openshift==0.11.2' jmespath docker psycopg2-binary pymongo

    # Start installing platform
    - mv "$STAGING_INVENTORY_FULL" inventory
    - *ssh_config_staging
    - mkdir -p /root/.kube
    - scp acn@$STAGING_TARGET_HOST:/home/acn/.kube/kubeconfig_txl_staging /root/.kube/kubeconfig_txl_staging
    - head -1 /root/.kube/kubeconfig_txl_staging
    - ansible-galaxy collection install community.kubernetes
    - ansible-playbook -i inventory -l localhost 03_setup_k8s_platform/full_install.yml
  when: manual
  stage: staging
  environment:
    name: "Deploy Staging Platform"
  artifacts:
    paths:
      - .facts/
    expire_in: never
    when: on_success

# deploy for staging
# test_serverscript_staging:
#   script:
#     - *ssh_config_staging
#     - 'which gem || ( apt-get update -y && apt-get install -y --no-install-recommends ruby )'
#     - gem install rspec serverspec
#     - cd 04_tests/serverspec
#     - TARGET_HOST=$TARGET_HOST_STAGING rake spec
#   stage: test
#   environment:
#     name: "Test Staging Env"
#   only:
#       - master

####################################
######     PRODUCTION    ###########
####################################


#.ssh_config_prod: &ssh_config_prod
#    - mkdir -p ~/.ssh
#    # Settings > Repository > Deploy Keys > "DEPLOY_KEY_PUBLIC_PROD" is the public key of the utitlized SSH pair (choose `Write access allowed` on creation)
#    # Settings > CI/CD > Variables > "DEPLOY_KEY_PRIVATE_PROD" is the private key of the utitlized SSH pair, type is 'File' and ends with empty line
#    - mv "$DEPLOY_KEY_PRIVATE_PROD" ~/.ssh/id_rsa_sc_admin
#    - mv "$DEPLOY_KEY_PUBLIC_PROD" ~/.ssh/id_rsa_sc_admin.pub
#    - chmod 600 ~/.ssh/id_rsa_sc_admin
#    - chmod 600 ~/.ssh/id_rsa_sc_admin.pub
#    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'
#    - eval "$(ssh-agent -s)"
#    - ssh-add ~/.ssh/id_rsa_sc_admin
#    - ssh-keyscan -H $TARGET_HOST_PROD >> ~/.ssh/known_hosts
#    # Set ssh config for serverspec
#    - mv 01_setup_base/files/ssh_config ~/.ssh/config
#    - sed -i "s/THEHOSTNAME/$TARGET_HOST_PROD/g" ~/.ssh/config
#    - chmod 600 ~/.ssh/config
#
#
## deploy for production
#deploy_ansible_prod:
#  script:
#    - *ssh_config_prod
#    - mv "$INVENTORY_PROD" inventory
#    - ansible-playbook 01_setup_base/playbook.yml -l $TARGET_HOSTNAME_PROD -u root -i inventory
#    - ansible-playbook 02_setup_docker/playbook.yml -l $TARGET_HOSTNAME_PROD -u mrdocker --private-key ~/.ssh/id_rsa_sc_admin -i inventory
#    - ansible-playbook 03_setup_containers_plattform/playbook.yml -l $TARGET_HOSTNAME_PROD -u mrdocker --private-key ~/.ssh/id_rsa_sc_admin -i inventory
#    - ansible-playbook 05_usecases/playbook.yml -l $TARGET_HOSTNAME_PROD -u mrdocker --private-key ~/.ssh/id_rsa_sc_admin -i inventory
#  stage: prod
#  environment:
#    name: "Deploy Production Env"
#  only:
#      - deployment
#  artifacts:
#    paths:
#      - .facts/
#      - 03_setup_containers_plattform/files/traefik/
#    expire_in: never
#    when: always
#
## deploy for production
#test_serverscript_prod:
#  script:
#    - *ssh_config_prod
#    - 'which gem || ( apt-get update -y && apt-get install -y --no-install-recommends ruby )'
#    - gem install rspec serverspec
#    - cd 04_tests/serverspec
#    - TARGET_HOST=$TARGET_HOST_PROD rake spec
#  stage: test
#  environment:
#    name: "Test Production Env"
#  only:
#      - deployment
